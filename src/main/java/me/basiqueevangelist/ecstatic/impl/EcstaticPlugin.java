/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.basiqueevangelist.ecstatic.impl;

import me.basiqueevangelist.ecstatic.api.EcstaticExtension;
import net.fabricmc.loom.configuration.processors.JarProcessor;
import org.gradle.api.GradleException;
import org.gradle.api.Project;
import org.gradle.api.Plugin;

import java.lang.reflect.Method;

public class EcstaticPlugin implements Plugin<Project> {
    private boolean addedJarProcessor = false;
    private EcstaticExtension extension;

    public void apply(Project project) {
        extension = project.getExtensions().create("ecstatic", EcstaticExtension.class);

        project.getPluginManager().withPlugin("fabric-loom", p -> tryAddJarProcessor(project));

        project.getPluginManager().withPlugin("dev.architectury.loom", p -> tryAddJarProcessor(project));

        project.afterEvaluate(p -> {
            if (!addedJarProcessor) throw new GradleException("Couldn't find fabric-loom plugin!");
        });
    }

    private void tryAddJarProcessor(Project project) {
        try {
            Object loomExtension = project.getExtensions().getByName("loom");
            Method addJarProcessor = loomExtension.getClass().getMethod("addJarProcessor", JarProcessor.class);
            addJarProcessor.invoke(loomExtension, new EcstaticProcessor(extension));

            addedJarProcessor = true;
        } catch (ReflectiveOperationException roe) {
            throw new GradleException("Couldn't add JarProcessor!", roe);
        }
    }
}
